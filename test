package com.samsung.android.companionservice.watchface.bnr

import android.annotation.SuppressLint
import android.content.Context
import androidx.work.Data
import androidx.work.WorkerParameters
import com.samsung.android.companionservice.watchface.util.WFLog
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File

class WfBnrAremojiWork(cont: Context, param: WorkerParameters) : WfBnrWorkerBase(cont, param) {

    internal var srcPath: String? = ""
    internal var targetPath: String? = ""
    internal var comparePath: String? = ""
    internal var src: File? = null
    internal var target: File? = null
    internal var compare: File? = null
    internal var output: Data? = null
    var isBackup = false

    @SuppressLint("RestrictedApi")
    override suspend fun doWork(): Result {
        return withContext(Dispatchers.IO) {
            val packageName = inputData.getString(WF_RESOURCE_PACKAGE_NAME)
            val className = inputData.getString(WF_RESOURCE_CLASS_NAME)
            var favoriteId = inputData.getInt(WF_RESOURCE_FAVORITE_ID, -1)
            isBackup = inputData.getBoolean(BACKUP_STATUS, false)

            try {
                WFLog.d(TAG, " WfBnrAremojiWork dowork")
                @Suppress("VARIABLE_WITH_REDUNDANT_INITIALIZER") var result = 1
                var path = inputData.getString(GM_FOLDER_PATH)
                var resourceFolder = "$packageName${File.separator}$className"
                var backupFolder =
                    "$BACKUP_FOLDER${File.separator}$AREMOJI_BACKUP_FOLDER${File.separator}$favoriteId"

                srcPath = path!!.plus(if (isBackup) resourceFolder else backupFolder)
                targetPath = path.plus(if (isBackup) backupFolder else resourceFolder)
                comparePath =
                    path!!.plus("$packageName${File.separator}$className${File.separator}$ID$favoriteId${File.separator}$EMOJI_DATA_FOLDER")

                WFLog.d(TAG, " srcPath $srcPath")
                WFLog.d(TAG, " comparePath $comparePath")
                WFLog.d(TAG, " targetPath $targetPath")

                src = File(srcPath)
                target = File(targetPath)
                compare = File(comparePath)
                if (!compare!!.exists()) {
                    result = RESULT_SRC_NOT_EXIST
                } else {
                    result = if (isBackup) backupResource(target!!) else restoreResource()
                }
                output = setOutPutData(packageName!!, favoriteId, result, isBackup)
                if (result <= 0) {
                    Result.Failure(output!!)
                } else {
                    Result.Success()
                }
            } catch (e: Exception) {
                WFLog.w(TAG, "WfAremojiWorker Exception : $e")
                output =
                    setOutPutData(packageName!!, favoriteId, RESULT_UNKNOWN_EXCEPTION, isBackup)
                Result.Failure()
            }!!
        }
    }

    private fun restoreResource(): Int {
        return if (copyFile()) {
            RESULT_SUCCESS
        } else {
            RESULT_CPY_FAILED
        }
    }

    override fun cleanup(target: File): Boolean {
        return super.cleanup(target)
    }

    override fun copyFile(): Boolean {
        WFLog.d(TAG, "copyFile Aremoji")
        compare!!.listFiles()?.let { compList ->
            if (!compList.isNullOrEmpty()) {
                compList.filter { it.name.startsWith("avatarsticker") }
                    .forEach { compFile ->
                        src!!.listFiles()?.let { fileList ->
                            fileList.filter {
                                it.nameWithoutExtension.equals(compFile.nameWithoutExtension) &&
                                        it.name.endsWith(".zip")
                            }.forEach {
                                WFLog.d(TAG, "copyFile1 srcPath $it")
                                var targetFile =
                                    File(targetPath!!.plus("${File.separator}${it.name}"))
                                WFLog.d(TAG, "copyFile1 targetpath $targetFile")
                                copySpecificFile(it, targetFile)
                            }
                        }
                    }
            }
        }
        return true
    }


    companion object {
        val TAG = "WfBnrAremojiWork"
    }
}
