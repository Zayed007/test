package com.samsung.android.companionservice.watchface.data

import android.content.Context
import android.content.pm.PackageManager
import com.samsung.android.companionservice.constant.WatchFaceConstant
import com.samsung.android.companionservice.watchface.util.WFLog
import com.samsung.android.companionservice.watchface.util.WatchFaceUtil
import com.samsung.android.plugin.sharedlib.watchface.WatchFaceSharedConstant

object ShareViaWatchFaceInfo {
    private val TAG = "ShareViaWatchFaceInfo"
    var shareViaWatchFaceList = ArrayList<ShareViaWatchFaceItemInfo>()
    var shareViaWatchFaceActiveStatusMap: HashMap<ShareViaWatchFaceItemInfo, Boolean> = HashMap()
    init {
        shareViaWatchFaceList.add(ShareViaWatchFaceItemInfo(WatchFaceSharedConstant.MY_STYLE_WATCHFACE_PACKAGE_NAME,WatchFaceSharedConstant.MY_STYLE_WATCHFACE_CLASS_NAME,WatchFaceConstant.MY_STYLE_SHARE_VIA_ACTIVITY))
        shareViaWatchFaceList.add(ShareViaWatchFaceItemInfo(WatchFaceSharedConstant.MY_PHOTO_WATCHFACE_PACKAGE_NAME,WatchFaceSharedConstant.MY_PHOTO_WATCHFACE_CLASS_NAME,WatchFaceConstant.MY_PHOTO_SHARE_VIA_ACTIVITY))
        shareViaWatchFaceList.add(ShareViaWatchFaceItemInfo(WatchFaceSharedConstant.MY_PEBBLE_WATCHFACE_PACKAGE_NAME,WatchFaceSharedConstant.MY_PEBBLE_WATCHFACE_CLASS_NAME,WatchFaceConstant.MY_PEBBLE_SHARE_VIA_ACTIVITY))
        shareViaWatchFaceList.add(ShareViaWatchFaceItemInfo(WatchFaceSharedConstant.PHOTO_STICKER_PACKAGE_NAME,WatchFaceSharedConstant.PHOTO_STICKER_CLASS_NAME,WatchFaceConstant.PHOTO_STRIKER_SHARE_VIA_ACTIVITY))
    }

    /**
     * @param context: not nullable context value
     * @param availableListPackageClassNameSet:Available watchface ExWatchFace.packageName+ExWatchFace.className set. Value order must class name followed by package name
     */
    fun updateShareViaWatchFaceInfo(context: Context, availableListPackageClassNameSet: MutableSet<String>) {
        shareViaWatchFaceList.forEach {
            val keyItem = it.watchFacePackageName + it.watchFaceClassName
            val currentStatusValue = shareViaWatchFaceActiveStatusMap[it]
            if(currentStatusValue != null) {
                WFLog.d(TAG,"currentStatusValue:: $currentStatusValue")
                if (availableListPackageClassNameSet.contains(keyItem) && currentStatusValue == false ) {
                    WFLog.i(TAG, "updateShareViaActivityStatus:: Enabled $it")
                    WatchFaceUtil.setComponentSetting(context, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, it.activityClassName)
                    shareViaWatchFaceActiveStatusMap[it] = true
                } else if(!availableListPackageClassNameSet.contains(keyItem) && currentStatusValue == true) {
                    WFLog.i(TAG, "updateShareViaActivityStatus:: Disabled $it")
                    WatchFaceUtil.setComponentSetting(context, PackageManager.COMPONENT_ENABLED_STATE_DISABLED, it.activityClassName)
                    shareViaWatchFaceActiveStatusMap[it] = false
                } else {
                    WFLog.i(TAG, "updateShareViaActivityStatus:: nothing to change $it")
                }
            } else {
                if(availableListPackageClassNameSet.contains(keyItem)) {
                    WFLog.i(TAG, "updateShareViaActivityStatus:: Enabled $it")
                    WatchFaceUtil.setComponentSetting(context, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, it.activityClassName)
                    shareViaWatchFaceActiveStatusMap[it] = true
                } else {
                    WFLog.i(TAG, "updateShareViaActivityStatus:: Disabled $it")
                    WatchFaceUtil.setComponentSetting(context, PackageManager.COMPONENT_ENABLED_STATE_DISABLED, it.activityClassName)
                    shareViaWatchFaceActiveStatusMap[it] = false
                }

            }
        }
    }
}
