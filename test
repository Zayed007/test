object CompanionServiceInterface{
protected var mICompanionService: ICompanionServiceInterface? = null
        fun getWatchFaceOrderType(deviceID: String?): WatchfaceOrderType {
        try {
            if (mICompanionService != null) {
                return mICompanionService!!.getWatchFaceOrderType(deviceID)
            } else {
                WFLog.e(TAG, "getWatchFaceOrderType mICompanionService is null")
                return WatchfaceOrderType(true, null)
            }
        } catch (e: Exception) {
            e.printStackTrace()
            return WatchfaceOrderType(true, null)
        }
    }
}

public class WatchfaceOrderType implements Parcelable {
    private static final String TAG = "[WF]_" + WatchfaceOrderType.class.getSimpleName();
    @SerializedName("isWatchSortByRecentsEnabled")
    private boolean isWatchSortByRecentsEnabled;
    @SerializedName("WatchFaceOrderType")
    private String mWatchFaceOrderType;

    public WatchfaceOrderType(boolean isRecentOrder, String oderType) {
        isWatchSortByRecentsEnabled = isRecentOrder;
        mWatchFaceOrderType = oderType;
    }

    public WatchfaceOrderType(Parcel in) {
        isWatchSortByRecentsEnabled = in.readByte() == 1;
        mWatchFaceOrderType = in.readString();
    }

    public static final Creator<WatchfaceOrderType> CREATOR = new Creator<WatchfaceOrderType>() {
        @Override
        public WatchfaceOrderType createFromParcel(Parcel in) {
            return new WatchfaceOrderType(in);
        }

        @Override
        public WatchfaceOrderType[] newArray(int size) {
            return new WatchfaceOrderType[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeByte((byte) (isWatchSortByRecentsEnabled ? 1 : 0));
        dest.writeString(mWatchFaceOrderType);
    }

    public String getOrderType() {
        if(!TextUtils.isEmpty(mWatchFaceOrderType))
            return mWatchFaceOrderType;
        else if(isWatchSortByRecentsEnabled)
            return WatchFaceConstant.WATCHFACE_ORDER_TYPE_NEW_RECENT;
        else
            return WatchFaceConstant.WATCHFACE_ORDER_TYPE_NEW_CUSTOM;
    }

    public boolean getOrderTypeBoolean() {
        if(!TextUtils.isEmpty(mWatchFaceOrderType)) {
            return mWatchFaceOrderType.equals(WatchFaceConstant.WATCHFACE_ORDER_TYPE_NEW_RECENT);
        }
        return isWatchSortByRecentsEnabled;
    }

    public void setOrderType(boolean type) {
        isWatchSortByRecentsEnabled = type;
    }

    public void setOrderType(String type) {
        mWatchFaceOrderType = type;
    }

    @Override
    public String toString(){
        StringBuilder result = new StringBuilder();
        result.append("isRecent : " ).append(isWatchSortByRecentsEnabled);
        result.append(", orderType : " ).append(mWatchFaceOrderType);
        return result.toString();
    }

}
