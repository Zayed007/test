public class InterfaceAdapter implements JsonSerializer, JsonDeserializer {

    private static final String CLASSNAME = "CLASSNAME";
    private static final String DATA = "DATA";


    /****** Helper method to get the className of the object to be deserialized *****/
    public Class getObjectClass(String className) {
        try {
            return Class.forName(className);
        } catch (ClassNotFoundException e) {
            //e.printStackTrace();
            throw new JsonParseException(e.getMessage());
        }
    }

    @Override
    public Object deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        if (json != null) {
            JsonObject jsonObject = json.getAsJsonObject();
            if (jsonObject != null) {
                JsonPrimitive prim = (JsonPrimitive) jsonObject.get(CLASSNAME);
                if (prim != null) {
                    String className = prim.getAsString();
                    if(className != null) {
                        Class klass = getObjectClass(className);
                        if(klass != null) {
                            return context.deserialize(jsonObject.get(DATA), klass);
                        }
                    }
                }
            }
        }
        return null;
    }

    @Override
    public JsonElement serialize(Object src, Type typeOfSrc, JsonSerializationContext context) {
        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty(CLASSNAME, src.getClass().getName());
        jsonObject.add(DATA, context.serialize(src));
        return jsonObject;
    }
}
