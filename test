object ArEmojiCharacterDataMap {
    private val TAG = "ArEmojiCharacterDataMap"
    private val watchFaceOrderMap = HashMap<String, List<ArEmojiItemData>>()
    private val LockDatabase = Any()

    fun setAvatar(deviceId: String, avatar: LinkedHashMap<String, ArEmojiItemData>) {
        synchronized(LockDatabase) {
            var avatarList = ArrayList(avatar.values)
            WFLog.d(TAG, "avatarList size : " + avatar.size)
            watchFaceOrderMap.put(deviceId, avatarList)
        }
        WFLog.d(TAG, "setAvatar")
    }

    fun getAvatar(deviceId: String): List<ArEmojiItemData>? {
        var avatarList: List<ArEmojiItemData> = emptyList()
        watchFaceOrderMap.get(deviceId)?.let{
            WFLog.d(TAG, "getAvatar ${it.size}")
        } ?:run{
            return avatarList
        }
        return watchFaceOrderMap.get(deviceId)
    }
}

data class ArEmojiItemData(var packageName: String?, var imageName: String?, var activated: Int?) : Parcelable {

    constructor(`in`: Parcel) :this(`in`.readString(), `in`.readString(), `in`.readInt()) {
    }

    override fun writeToParcel(parcel: Parcel, flags: Int) {
        parcel.writeString(packageName)
        parcel.writeString(imageName)
        activated?.let { parcel.writeInt(it) }
    }

    override fun describeContents(): Int {
        return 0
    }

    fun setActivatStatus(status : Int){
        this.activated = status
    }

    fun getActivateStatus(): Int {
        if (this.activated == null) {
            this.activated = 0
        }
        return this.activated!!
    }

    companion object CREATOR : Parcelable.Creator<ArEmojiItemData> {
        override fun createFromParcel(parcel: Parcel): ArEmojiItemData {
            return ArEmojiItemData(parcel)
        }

        override fun newArray(size: Int): Array<ArEmojiItemData?> {
            return arrayOfNulls(size)
        }
    }
}
